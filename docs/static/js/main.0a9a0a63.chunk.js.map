{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mMAKaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAmB9C,OACI,mCAGK,sBAAMC,SAdM,SAACC,GAClBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAU,OAAIP,GAAJ,mBAAmBO,OAC5CN,EAAc,MASb,SACG,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAvBU,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,e,+BCVlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEbC,EAFa,0FAE4EC,UAAWH,GAFvF,sBAIAI,MAAOF,GAJP,cAIbG,EAJa,gBAMIA,EAAKC,OANT,uBAMXC,EANW,EAMXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAQF,EAAIE,MACZV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAI1Ca,QAAQC,IAAIR,GAhBO,kBAkBZA,GAlBY,4CAAH,sDCCPS,EAAc,SAAC,GAAyB,EAAtBN,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAGtC,OACI,sBAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAMjB,EAAMkB,IAAMR,IACvB,kCAAMA,SCHLS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAAc,ECFX,SAAEA,GAAa,IAAD,EACZd,mBAAS,CAC/BqB,KAAK,GACLe,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAyBtC,OAnBAC,qBAAW,WAEP1B,EAAUC,GACL0B,MAAM,SAAAC,GAGHH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAOtB,CAACtB,IAIGuB,EDlB0BK,CAAc5B,GAAlCa,EALsB,EAK3BN,KAAae,EALc,EAKdA,QAcrB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDlB,IAEjDsB,GAAW,mBAAGJ,UAAU,mCAAb,uBAEZ,qBAAKA,UAAU,8CAAf,SAGWL,EAAOJ,KAAM,SAAAC,GAAG,OACZ,cAAC,EAAD,eAEIA,GADIA,EAAIC,aE/B3BkB,EAAe,WAAO,IAAD,EAGM3C,mBAAS,CAAC,cAHhB,mBAGvBQ,EAHuB,KAGXT,EAHW,KAe9B,OACI,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAGE,6BAEIS,EAAWe,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAaA,GADPA,YClBf8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCDdO,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.0a9a0a63.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\n\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('')\n\n    const handleInputChange = (e) => {\n        //console.log(e.target.value)\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e)=> {\n        e.preventDefault();\n        //console.log('Submit hecho')\n        if ( inputValue.trim().length > 2 ){\n            setCategories( categories =>[inputValue, ...categories]);\n            setInputValue('');\n        }\n        \n    }\n\n    return (\n        <>\n            {/* <h2>Addd Category</h2> */}\n             {/* <h1>{ inputValue }</h1> */}\n             <form onSubmit={ handleSubmit }>\n                <input \n                    type=\"text\"\n                    value={ inputValue} \n                    onChange={handleInputChange }\n                />  \n                \n             </form>\n             \n        </>\n    )\n}\n\nAddCategory.propTypes={\n    setCategories: PropTypes.func.isRequired\n}\n","\nexport const getGifs = async ( category )=>{\n\n    const url =`https://api.giphy.com/v1/gifs/search?api_key=sSqBhYWiwlaloTOxfSKRFkkblJz4wVzN&q=${ encodeURI (category) }&limit=10`\n\n    const resp = await fetch (url);\n\n    const { data } = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title : img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    console.log(gifs);\n\n    return gifs;\n\n    //    setImages( gifs )\n}","import React from 'react'\n\nexport const GifGridItem = ( { id, title, url } ) => {\n\n    //console.log({ id, title, url })\n    return (\n        <div className=\"card animate__animated animate__fadeIn\" >\n            <img src={ url } alt={ title }/>\n            <p> { title }</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\n\nexport const GifGrid = ({category}) => {\n\n    //const [count, setCount] = useState(0)\n\n    \n    const { data:images, loading } = useFetchGifs( category );\n    //console.log(state)\n    \n    \n    /* \n\n        useEffect( ()=> {\n        getGifs( category ).then (imgs => setImages( imgs ));\n        }, [ category ]) */\n\n\n    \n    \n\n    return (\n        <>\n            <h3 className='animate__animated animate__fadeIn'>{category}</h3> \n            \n            { loading && <p className='animate__animated animate__flash'> Loading </p> }\n            \n             <div className='card-grid animate__animated animate__fadeIn'>\n                \n                    {\n                        images.map ( img => (\n                            <GifGridItem \n                            key = { img.id }\n                            {...img}\n                            //img = { img } \n                            />\n                        ))\n                    }\n                \n            </div> \n        </>\n    )\n}\n","import  { useState, useEffect } from 'react'\nimport  { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category )=>{\n    const [state, setState] = useState({\n        data:[],\n        loading: true\n    });\n\n    useEffect( () => {\n\n        getGifs ( category )\n            .then (imgs => {\n\n                //setTimeout( ()=>{\n                setState({\n                    data: imgs,\n                    loading: false\n                });\n                //}, 3000)\n                \n            })\n\n\n    }, [category])\n\n\n\n    return state; \n}","import React,{ useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    \n    const [categories, setCategories] = useState(['One Punch']);\n\n    /* const handleAdd = ()=>{\n        \n        //setCategories([...categories, 'HunterXHunter']);\n\n        setCategories( categories =>[...categories,'HunterXHunter']);\n        //categories.push('HunterXHunter')\n        console.log(categories);\n    } */\n\n    //console.log(categories);\n    return (\n        <>\n          <h2>GifExpertApp</h2>\n          <AddCategory setCategories={ setCategories }/>\n          <hr />\n\n                {/* <button onClick={handleAdd}>Agregar</button> */}\n            <ol>\n                {\n                categories.map(category =>  (\n                    <GifGrid \n                        key={ category }\n                        category = { category}/>\n                    ))\n                }\n            </ol>\n\n          \n        </>\n    )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp'\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\nReactDOM.render(\n  \n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}